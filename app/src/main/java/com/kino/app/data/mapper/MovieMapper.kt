package com.kino.app.data.mapper

import com.kino.app.data.local.entity.MovieEntity
import com.kino.app.data.remote.dto.MovieDto
import com.kino.app.domain.model.Movie

fun MovieEntity.toMovieModel() : Movie {
    return Movie(
        artistName = artistName,
        artworkUrl100 = artworkUrl100,
        artworkUrl30 = artworkUrl30,
        artworkUrl60 = artworkUrl60,
        collectionArtistId = collectionArtistId,
        collectionArtistViewUrl = collectionArtistViewUrl,
        collectionCensoredName = collectionCensoredName,
        collectionExplicitness = collectionExplicitness,
        collectionHdPrice = collectionHdPrice,
        collectionId = collectionId,
        collectionName = collectionName,
        collectionPrice = collectionPrice,
        collectionViewUrl = collectionViewUrl,
        contentAdvisoryRating = contentAdvisoryRating,
        country = country,
        currency = currency,
        discCount = discCount,
        discNumber = discNumber,
        hasITunesExtras = hasITunesExtras,
        kind = kind,
        longDescription = longDescription,
        previewUrl = previewUrl,
        primaryGenreName = primaryGenreName,
        releaseDate = releaseDate,
        shortDescription = shortDescription,
        trackCensoredName = trackCensoredName,
        trackCount = trackCount,
        trackExplicitness = trackExplicitness,
        trackHdPrice = trackHdPrice,
        trackHdRentalPrice = trackHdRentalPrice,
        trackId = trackId,
        trackName = trackName,
        trackNumber = trackNumber,
        trackPrice = trackPrice,
        trackRentalPrice = trackRentalPrice,
        trackTimeMillis = trackTimeMillis,
        trackViewUrl = trackViewUrl,
        wrapperType = wrapperType,
        liked = liked
    )
}


fun Movie.toMovieEntity(): MovieEntity {
    return MovieEntity(
        artistName = artistName,
        artworkUrl100 = artworkUrl100,
        artworkUrl30 = artworkUrl30,
        artworkUrl60 = artworkUrl60,
        collectionArtistId = collectionArtistId,
        collectionArtistViewUrl = collectionArtistViewUrl,
        collectionCensoredName = collectionCensoredName,
        collectionExplicitness = collectionExplicitness,
        collectionHdPrice = collectionHdPrice,
        collectionId = collectionId,
        collectionName = collectionName,
        collectionPrice = collectionPrice,
        collectionViewUrl = collectionViewUrl,
        contentAdvisoryRating = contentAdvisoryRating,
        country = country,
        currency = currency,
        discCount = discCount,
        discNumber = discNumber,
        hasITunesExtras = hasITunesExtras,
        kind = kind,
        longDescription = longDescription,
        previewUrl = previewUrl,
        primaryGenreName = primaryGenreName,
        releaseDate = releaseDate,
        shortDescription = shortDescription,
        trackCensoredName = trackCensoredName,
        trackCount = trackCount,
        trackExplicitness = trackExplicitness,
        trackHdPrice = trackHdPrice,
        trackHdRentalPrice = trackHdRentalPrice,
        trackId = trackId,
        trackName = trackName,
        trackNumber = trackNumber,
        trackPrice = trackPrice,
        trackRentalPrice = trackRentalPrice,
        trackTimeMillis = trackTimeMillis,
        trackViewUrl = trackViewUrl,
        wrapperType = wrapperType,
        liked = liked
    )
}

fun MovieDto.toMovieModel(): Movie {
    return Movie(
        artistName = artistName,
        artworkUrl100 = artworkUrl100,
        artworkUrl30 = artworkUrl30,
        artworkUrl60 = artworkUrl60,
        collectionArtistId = collectionArtistId,
        collectionArtistViewUrl = collectionArtistViewUrl,
        collectionCensoredName = collectionCensoredName,
        collectionExplicitness = collectionExplicitness,
        collectionHdPrice = collectionHdPrice,
        collectionId = collectionId,
        collectionName = collectionName,
        collectionPrice = collectionPrice,
        collectionViewUrl = collectionViewUrl,
        contentAdvisoryRating = contentAdvisoryRating,
        country = country,
        currency = currency,
        discCount = discCount,
        discNumber = discNumber,
        hasITunesExtras = hasITunesExtras,
        kind = kind,
        longDescription = longDescription,
        previewUrl = previewUrl,
        primaryGenreName = primaryGenreName,
        releaseDate = releaseDate,
        shortDescription = shortDescription,
        trackCensoredName = trackCensoredName,
        trackCount = trackCount,
        trackExplicitness = trackExplicitness,
        trackHdPrice = trackHdPrice,
        trackHdRentalPrice = trackHdRentalPrice,
        trackId = trackId,
        trackName = trackName,
        trackNumber = trackNumber,
        trackPrice = trackPrice,
        trackRentalPrice = trackRentalPrice,
        trackTimeMillis = trackTimeMillis,
        trackViewUrl = trackViewUrl,
        wrapperType = wrapperType,
        liked = false
    )
}